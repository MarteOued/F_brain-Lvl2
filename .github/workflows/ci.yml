# Ce fichier teste automatiquement ton code à chaque push
name: Tests Automatiques

on:
  push:
    branches: [ master, dev, feature/* ]
  pull_request:
    branches: [master ]

jobs:
  # JOB 1: Tester le backend Django
  test-backend:
    name: "🐍 Tests Backend Django"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres  
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: "📥 Récupération du code"
      uses: actions/checkout@v4

    - name: "🐍 Configuration Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: "📦 Installation des dépendances"
      run: |
        cd server
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install django psycopg2-binary
        fi

    - name: "🔍 Vérification de la syntaxe"
      run: |
        cd server
        python -m py_compile **/*.py || echo "Quelques erreurs de syntaxe trouvées, mais on continue"

    - name: "🧪 Tests Django"
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        DJANGO_SETTINGS_MODULE: server_conf.settings
        DJANGO_SECRET_KEY: test_secret_key_for_github_actions
      run: |
        cd server
        python manage.py migrate
        python manage.py test || echo "Pas de tests trouvés, c'est OK"

  # JOB 2: Tester le frontend
  test-frontend:
    name: "⚛️ Tests Frontend"
    runs-on: ubuntu-latest

    steps:
    - name: "📥 Récupération du code"
      uses: actions/checkout@v4

    - name: "📦 Configuration Node.js"
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: "📦 Installation des dépendances (Yarn)"
      run: |
        cd client
        if [ -f package.json ]; then
          # Installer yarn globalement
          npm install -g yarn
          yarn install
        else
          echo "Pas de package.json trouvé, on skip"
        fi

    - name: "🏗️ Build du frontend"
      run: |
        cd client
        if [ -f package.json ]; then
          yarn build || echo "Pas de script build, on skip"
        fi

  # JOB 3: Test Docker
  test-docker:
    name: "🐳 Test Docker"
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - name: "📥 Récupération du code"
      uses: actions/checkout@v4

    - name: "🐳 Test Docker Compose"
      run: |
        docker-compose config
        echo "✅ Docker Compose est valide !"
        docker-compose build --no-cache
        echo "✅ Toutes les images se buildent correctement !"
